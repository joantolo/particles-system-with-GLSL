#version 430
#define SIZE_X 2
#define SIZE_Y 1

layout( std140, binding = 0 ) buffer Pos {
   vec4 Positions[ ];
};

layout( std140, binding = 1 ) buffer Vel {
   vec4 Velocities[ ];
};

layout( std140, binding = 2 ) buffer Col {
   vec4 Colors[ ];
};

layout (local_size_x = SIZE_X, local_size_y = SIZE_Y) in;

uniform int stage;
uniform int subStage;
uniform mat4 modelView;

//Indice de la particula a integr
uint gid = gl_GlobalInvocationID.x;

void main()
{
	bool sortIncreasing = true;
	uint threadId = gid;

	// Determine where to conduct the bitonic split
	// by locating the middle-point of this 1D array
	uint distanceBetweenPairs = 1 << (stage - subStage);
	uint blockWidth = 2 * distanceBetweenPairs;

	// Determine the left and right indexes to data referencing
	uint leftId = (threadId % distanceBetweenPairs) + (threadId / distanceBetweenPairs) * blockWidth;
	uint rightId = leftId + distanceBetweenPairs;

	float leftElement = (modelView * Positions[leftId]).z;//data[leftId];
	float rightElement = (modelView * Positions[rightId]).z;//data[rightId];


	 // Threads are divided into blocks of size
	 // 2^sameDirectionBlockWidth
	 // and its used to build bitonic subsequences s.t the sorting is
	 // monotically increasing on the left and decreasing on the right
	 uint sameDirectionBlockWidth = 1 << stage;
	 if((threadId/sameDirectionBlockWidth) % 2 == 1)
		sortIncreasing = !sortIncreasing;

	 vec4 greaterPos;
	 vec4 lesserPos;	
	 
	 vec4 greaterVel;
	 vec4 lesserVel;
	 
	 vec4 greaterCol;
	 vec4 lesserCol;

	 // perform pairwise comparison between two elements and depending
	 // whether its to build the bitonic that is monotically increasing
	 // and decreasing.
	 if(leftElement > rightElement) 
	 {
		 greaterPos = Positions[leftId];
		 greaterVel = Velocities[leftId];
		 greaterCol = Colors[leftId];

		 lesserPos = Positions[rightId];
		 lesserVel = Velocities[rightId];
		 lesserCol = Colors[rightId];
	 }
	 else
	 {
		 greaterPos = Positions[rightId];
		 greaterVel = Velocities[rightId];
		 greaterCol = Colors[rightId];

		 lesserPos = Positions[leftId];
		 lesserVel = Velocities[leftId];
		 lesserCol = Colors[leftId];
	 }

	 if(sortIncreasing)
	 {
		 Positions[leftId] = lesserPos;
		 Velocities[leftId] = lesserVel;
		 Colors[leftId] = lesserCol;

		 Positions[rightId] = greaterPos;
		 Velocities[rightId] = greaterVel;
		 Colors[rightId] = greaterCol;
		 
	 } 
	 else 
	 {
		 Positions[leftId] = greaterPos;
		 Velocities[leftId] = greaterVel;
		 Colors[leftId] = greaterCol;

		 Positions[rightId] = lesserPos;
		 Velocities[rightId] = lesserVel;
		 Colors[rightId] = lesserCol;
	 }

}