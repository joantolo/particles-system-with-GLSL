#version 430
#define SIZE_X 512
#define SIZE_Y 1


layout( std140, binding = 0 ) buffer Pos {
   vec4 Positions[ ];
};

layout( std140, binding = 1 ) buffer Vel {
   vec4 Velocities[ ];
};

layout( std140, binding = 2 ) buffer Col {
   vec4 Colors[ ];
};

layout( std140, binding = 3 ) buffer Time {
   float particleLifeTime[ ];
};

layout (local_size_x = SIZE_X, local_size_y = SIZE_Y) in;

vec4 g = vec4(0.0, -9.8, 0.0, 0.0);
vec4 a = vec4(0.0, 10, 0.0, 0.0);
const float dt = 0.001;

const int totalLifeTime=6;

const int minParticleSize=10;
const int maxParticleSize=200;

uniform int simulationType;
uniform float runningTime;

//Indice de la particula a integr
uint gid = gl_GlobalInvocationID.x;

void main()
{
	vec4 p = Positions[gid];
	vec4 vel = Velocities[gid];
	vec4 col = Colors[gid];
	float timeParticle = particleLifeTime[gid];
	vec4 pos;

	//Marbles 
	if(simulationType == 0)
	{
		//col = col - dt * 100;
/*
		vel += g * dt;
		 pos = p + vel * dt;


		if(pos.y < -1.0)
		{
			vel = reflect(vel, vec4(0.0, 1.0, 0.0, 0.0)) * 0.9;
			pos = p + vel * dt;
		}*/


		float age= runningTime - timeParticle;
		if(runningTime >= (col.x))
		{
			float currentAge= age/totalLifeTime;
			col.w = 1.0 - currentAge;
			//gl_PointSize= mix(minParticleSize, maxParticleSize, currentAge);
		}
		vel += a * dt;
		pos = p + vel * dt;
	}
	else
	{
		col= vec4(1,0,0,1);
		float age= runningTime - timeParticle;
		if(runningTime >= (col.x))
		{
			float currentAge= age/totalLifeTime;
			col.w = 1.0 - currentAge;
			//gl_PointSize= mix(minParticleSize, maxParticleSize, currentAge);
		}
		vel += a * dt;
		pos = p + vel * dt;

	}


	Positions[gl_GlobalInvocationID.x] = pos;
	Velocities[gl_GlobalInvocationID.x] = vel;
	Colors[gl_GlobalInvocationID.x] = col;
}