#version 430
#define SIZE_X 512
#define SIZE_Y 1


layout( std140, binding = 0 ) buffer Pos {
   vec4 Positions[ ];
};

layout( std140, binding = 1 ) buffer Vel {
   vec4 Velocities[ ];
};

layout( std140, binding = 2 ) buffer Col {
   vec4 Colors[ ];
};

layout( std140, binding = 3 ) buffer Time {
   int ParticleLifeTime[ ];
};

layout (local_size_x = SIZE_X, local_size_y = SIZE_Y) in;

vec4 g = vec4(0.0, -9.8, 0.0, 0.0);

const float dt = 0.003;

const int maxParticleLife = 2000;

uniform int simulationType;
uniform int runningTime;

//Indice de la particula a integr
uint gid = gl_GlobalInvocationID.x;

void main()
{
	vec4 pos;
	vec4 p = Positions[gid];
	vec4 vel = Velocities[gid];
	vec4 col = Colors[gid];
	int particleLife = ParticleLifeTime[gid];

	switch(simulationType)
	{
		///////////////////
		// Marbles 
		///////////////////
		case(0):

			vel += g * dt;
			pos = p + vel * dt;

		break;

		///////////////////
		// Fontain
		///////////////////
		case(1):

			if(particleLife <= 1)
			{
				pos = vec4(0.0, 0.0, 0.0, 1.0);
				vel.y = col.r * 10;
				vel.x = mix(-2.0, 2.0, col.g);
				vel.z = mix(-2.0, 2.0, col.b);
				particleLife = maxParticleLife;
			}
			else
			{
				particleLife -= runningTime;

				vel += g * dt;
				pos = p + vel * dt;

				col.w = float(particleLife) / float(maxParticleLife);
			}

		break;

		case(2):
		//Aquí se puede hacer algo

		break;
	}



	if(pos.y < -1.0)
	{
		vel = reflect(vel, vec4(0.0, 1.0, 0.0, 0.0)) * 0.9;
		pos = p + vel * dt;
		pos.y = -1.0;
	}

	ParticleLifeTime[gid] = particleLife;
	Positions[gid] = pos;
	Velocities[gid] = vel;
	Colors[gid] = col;
}